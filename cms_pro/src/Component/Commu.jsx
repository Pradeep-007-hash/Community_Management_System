import { useState } from "react";
// We must import all React Router components/hooks needed for the whole application
import { BrowserRouter, Routes, Route, useNavigate, Link } from "react-router-dom"; 

// ------------------------------------------------------------------
// 1. UTILITIES AND ICONS 
// ------------------------------------------------------------------

// Google SVG Icon (small, clean G)
const GoogleIcon = ({ style }) => (
  <svg style={style} viewBox="0 0 48 48">
    <defs>
      <path id="a" d="M44.5 20H24v8.5h11.8c-.7 4.3-3.6 7.6-8.2 9.5v5.5h6.3c3.9-3.6 6.3-8.8 6.3-15.7 0-1.8-.2-3.4-.6-5z"/>
    </defs>
    <clipPath id="b">
      <use xlinkHref="#a" overflow="visible"/>
    </clipPath>
    <path clipPath="url(#b)" fill="#FBBC05" d="M0 37V11l17 13z"/>
    <path clipPath="url(#b)" fill="#EA4335" d="M0 11l17 13 7-6.1L4.6 4.4z"/>
    <path clipPath="url(#b)" fill="#34A853" d="M0 37l17-13-7 6.1-12.4 12.2z"/>
    <path clipPath="url(#b)" fill="#4285F4" d="M24 45.5c-.8 0-1.5-.1-2.2-.3-.1-.5-.2-1.1-.2-1.6 0-1.5.3-2.9.7-4.1-4.7-2-8.2-5.3-8.2-9.5V20H24v8.5h11.8c-.7 4.3-3.6 7.6-8.2 9.5v5.5h6.3c3.9-3.6 6.3-8.8 6.3-15.7 0-1.8-.2-3.4-.6-5z"/>
  </svg>
);

// Utility to generate a unique 6-digit OTP
const generateOTP = () => {
    // Generate a random number between 100000 and 999999
    return String(Math.floor(100000 + Math.random() * 900000));
};

// Component to display the mock OTP clearly
const MockOTPNotification = ({ code }) => (
    <div style={mockOtpContainerStyle}>
        <p style={mockOtpInstructionStyle}>[Simulated Email/SMS received]</p>
        <p style={{fontSize: "14px", color: "#333", margin: "5px 0"}}>Your verification code is:</p>
        <div style={mockOtpCodeStyle}>{code}</div>
        <p style={mockOtpSubInstructionStyle}>Enter this code above to verify your sign-in attempt.</p>
    </div>
);

// ------------------------------------------------------------------
// 2. CORE LOGIN COMPONENT (With Mock Logic)
// ------------------------------------------------------------------

const Login = () => {
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const [message, setMessage] = useState(""); // General status/error message
  const [googleFlowStep, setGoogleFlowStep] = useState('default'); // 'default', 'email', 'otp'
  const [googleEmail, setGoogleEmail] = useState('');
  const [otp, setOtp] = useState(''); // User's input for OTP
  const [generatedCode, setGeneratedCode] = useState(''); // The mock code generated by the app
  
  const navigate = useNavigate();

  const handleGoogleSignIn = () => {
    setMessage("");
    setGoogleFlowStep('email');
    setGeneratedCode(''); // Clear old code when starting over
  };

  const handleEmailSubmit = (e) => {
    e.preventDefault();
    if (googleEmail && googleEmail.includes('@') && googleEmail.includes('.')) {
        // --- UPDATED MOCK OTP GENERATION ---
        const newCode = generateOTP();
        setGeneratedCode(newCode); // Store the generated code
        // Set a brief status message, the code itself is shown in the MockOTPNotification component
        setMessage(`Verification code initiated for ${googleEmail}.`);
        setGoogleFlowStep('otp');
    } else {
        setMessage("Please enter a valid email address.");
    }
  };

  const handleOTPSubmit = (e) => {
    e.preventDefault();
    // Compare user input (otp) against the generated code stored in state
    if (otp === generatedCode) { 
        setMessage("OTP verified. Successfully signed in! Redirecting...");
        localStorage.setItem("userId", "mock-google-otp-id");
        
        // Cleanup and navigate after successful login
        setTimeout(() => {
            setGoogleFlowStep('default');
            setGoogleEmail('');
            setOtp('');
            setGeneratedCode(''); 
            navigate("/userdashboard"); 
        }, 1500);
    } else {
        // Display a failure message
        setMessage(`Invalid OTP. Please check the code in the simulated notification and try again.`);
    }
  };


  const handleLogin = async (e) => {
    e.preventDefault();
    setMessage(""); 
    
    // MOCK LOGIN LOGIC: Replaces the server fetch call for sandbox environment
    if (username === "admin" && password === "admin123") {
        setMessage("Admin Login successful (Mock)! Redirecting...");
        localStorage.setItem("userId", "mock-admin-id");
        // Navigates to the route the user specified: /admin
        setTimeout(() => navigate("/admin"), 1000); 
    } else if (username === "user" && password === "user123") {
        setMessage("User Login successful (Mock)! Redirecting...");
        localStorage.setItem("userId", "mock-user-id");
        // Navigates to the route the user specified: /userdashboard
        setTimeout(() => navigate("/userdashboard"), 1000); 
    } else {
        setMessage("Invalid username or password (Mock Failure). Try 'user'/'user123' or 'admin'/'admin123'.");
    }
  };

  // ----------------- INPUT BASE STYLE -----------------
  const inputBaseStyle = {
    padding: "12px",
    marginBottom: "18px",
    borderRadius: "6px",
    border: "1px solid #ccc",
    backgroundColor: "#fff", 
    color: "#000", 
    fontSize: "14px",
    outline: "none",
    transition: "all 0.2s ease", 
    width: "100%",
  };

  const inputFocusStyle = {
    border: "1px solid #1976d2", 
    boxShadow: "0 0 5px rgba(25, 118, 210, 0.3)", 
  };
  
  // Custom styles for success/error messages
  const successMessageStyle = {
    ...errorStyle, // Inherit base properties
    color: "#2e7d32", // Green color for success
    background: "#e8f5e9", // Light green background
    border: "1px solid #a5d6a7",
    padding: "10px",
    borderRadius: "6px",
  };

  return (
    <div style={containerStyle}>
      <div style={cardStyle}>
        <h2 style={titleStyle}>Welcome Back</h2>
        <p style={subtitleStyle}>Please sign in to continue</p>
        
        {googleFlowStep === 'default' && (
            // --- DEFAULT LOGIN VIEW (Username/Password) ---
            <>
              {/* GOOGLE SIGN IN BUTTON */}
              <button
                onClick={handleGoogleSignIn}
                style={googleButtonStyle}
                onMouseOver={(e) => Object.assign(e.currentTarget.style, googleButtonStyle, googleButtonHoverStyle)}
                onMouseOut={(e) => Object.assign(e.currentTarget.style, googleButtonStyle)}
              >
                <div style={googleIconContainerStyle}>
                  <GoogleIcon style={{width: '24px', height: '24px'}} />
                </div>
                <div style={googleTextContainerStyle}>
                  Sign in with Google
                </div>
              </button>
              {/* Separator between Google button and form */}
              <div style={separatorStyle}>
                <span style={lineStyle}></span>
                <span style={{ margin: '0 0px 0 10px', color: '#888' }}>OR</span>
                <span style={lineStyle}></span>
              </div>

              <form onSubmit={handleLogin} style={formStyle}>
                <label style={labelStyle}>Username</label>
                <input
                  type="text"
                  value={username}
                  onChange={(e) => setUsername(e.target.value)}
                  required
                  placeholder="Enter your username (Mock: user or admin)"
                  style={inputBaseStyle}
                  onFocus={(e) => Object.assign(e.target.style, inputBaseStyle, inputFocusStyle)}
                  onBlur={(e) => Object.assign(e.target.style, inputBaseStyle)}
                />

                <label style={labelStyle}>Password</label>
                <input
                  type="password"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  required
                  placeholder="Enter your password (Mock: user123 or admin123)"
                  style={inputBaseStyle}
                  onFocus={(e) => Object.assign(e.target.style, inputBaseStyle, inputFocusStyle)}
                  onBlur={(e) => Object.assign(e.target.style, inputBaseStyle)}
                />

                <button type="submit" style={buttonStyle}>
                  Sign In
                </button>
              </form>
            </>
        )}

        {/* --- GOOGLE CUSTOM FLOW VIEW (Email/OTP) --- */}
        {googleFlowStep === 'email' && (
            <form onSubmit={handleEmailSubmit} style={formStyle}>
                <label style={labelStyle}>Email for Verification</label>
                <input
                    type="email"
                    value={googleEmail}
                    onChange={(e) => setGoogleEmail(e.target.value)}
                    required
                    placeholder="Enter your email"
                    style={inputBaseStyle}
                    onFocus={(e) => Object.assign(e.target.style, inputBaseStyle, inputFocusStyle)}
                    onBlur={(e) => Object.assign(e.target.style, inputBaseStyle)}
                />
                <button type="submit" style={buttonStyle}>
                    Generate OTP
                </button>
                <button type="button" onClick={() => setGoogleFlowStep('default')} style={{ ...buttonStyle, background: '#ccc', color: '#333', marginTop: '10px' }}>
                    Cancel
                </button>
            </form>
        )}

        {googleFlowStep === 'otp' && (
            <>
                <form onSubmit={handleOTPSubmit} style={formStyle}>
                    <label style={labelStyle}>One-Time Password (OTP)</label>
                    <input
                        type="text"
                        value={otp}
                        onChange={(e) => setOtp(e.target.value)}
                        required
                        placeholder="Enter the 6-digit code from the notification"
                        style={inputBaseStyle}
                        maxLength="6"
                        onFocus={(e) => Object.assign(e.target.style, inputBaseStyle, inputFocusStyle)}
                        onBlur={(e) => Object.assign(e.target.style, inputBaseStyle)}
                    />
                    <button type="submit" style={buttonStyle}>
                        Verify OTP
                    </button>
                    <button type="button" onClick={() => { setGoogleFlowStep('email'); setMessage(''); setGeneratedCode(''); }} style={{ ...buttonStyle, background: '#ccc', color: '#333', marginTop: '10px' }}>
                        Back to Email
                    </button>
                </form>

                {/* Display the Mock OTP notification when in the OTP step */}
                <MockOTPNotification code={generatedCode} />
            </>
        )}

        {/* Display general messages (login errors, pre-OTP status, OTP success/failure) */}
        {message && (
            <p style={
                message.includes('success') || message.includes('initiated') || message.includes('verified')
                    ? successMessageStyle
                    : errorStyle
            }>
                {message}
            </p>
        )}


        {/* Signup links only visible in default login view */}
        {googleFlowStep === 'default' && (
          <>
            <p style={signupText}>
              Don’t have an account?{" "}
              <Link to="/signup" style={signupLink}>
                Sign up
              </Link>
            </p>
            <p style={{color:"black"}}><Link to="/forgot-password" style={signupLink}>Forgot password?</Link></p>
          </>
        )}
      </div>
    </div>
  );
};


// ------------------------------------------------------------------
// 3. MOCK COMPONENTS FOR USER'S ROUTES 
// ------------------------------------------------------------------

// Base styling for all mock dashboard/info pages
const DashboardContainerStyle = {
    height: "100vh",
    display: "flex",
    flexDirection: "column",
    justifyContent: "center",
    alignItems: "center",
    background: "#e8f0ff",
    fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
    textAlign: "center",
    padding: "20px",
    boxSizing: "border-box",
};

const DashboardTitleStyle = {
    fontSize: "36px",
    color: "#1976d2",
    marginBottom: "20px"
};

// Reusable Logout Button
const LogoutButton = () => {
    const navigate = useNavigate();
    const handleLogout = () => {
        localStorage.removeItem("userId");
        navigate("/");
    };
    return (
        <button onClick={handleLogout} style={{ ...buttonStyle, background: '#d32f2f', marginTop: '30px' }}>
            Logout
        </button>
    );
};

// Mock Component for /
const Frontpage = () => (
    <div style={DashboardContainerStyle}>
        <h1 style={DashboardTitleStyle}>Community CMS Home Page</h1>
        <p style={{ fontSize: "18px", color: "#555", marginBottom: "30px" }}>Welcome to the Community Management System. Please <Link to="/Login" style={signupLink}>Login</Link> or <Link to="/signup" style={signupLink}>Sign Up</Link>.</p>
        <Link to="/Login" style={buttonStyle}>Go to Login</Link>
    </div>
);

// Mock Component for /signup
const Signup = () => (
    <div style={DashboardContainerStyle}>
        <h1 style={DashboardTitleStyle}>Sign Up (Member Registration)</h1>
        <p style={{ fontSize: "18px", color: "#555", marginBottom: "30px" }}>This page will contain the member registration form.</p>
        <Link to="/" style={signupLink}>Back to Home</Link>
    </div>
);

// Mock Component for /admin
const Admin = () => {
    // Check if the user is authenticated (mock check)
    if (localStorage.getItem("userId") !== "mock-admin-id") {
        return <div style={DashboardContainerStyle}><h1 style={DashboardTitleStyle}>Access Denied</h1><p>You must be logged in as an admin.</p><Link to="/Login" style={signupLink}>Go to Login</Link></div>;
    }
    return (
        <div style={DashboardContainerStyle}>
            <h1 style={DashboardTitleStyle}>Admin Dashboard</h1>
            <p style={{ fontSize: "18px", color: "#555", marginBottom: "30px" }}>Welcome, administrator! Access controls and approvals are managed here. (Mock ID: {localStorage.getItem("userId")})</p>
            <Link to="/memapprove" style={buttonStyle}>Go to Approvals</Link>
            <LogoutButton />
        </div>
    );
};

// Mock Component for /userdashboard
const Userdashboard = () => {
    // Check if the user is authenticated (mock check)
    if (!localStorage.getItem("userId")) {
        return <div style={DashboardContainerStyle}><h1 style={DashboardTitleStyle}>Access Denied</h1><p>You must be logged in to view your dashboard.</p><Link to="/Login" style={signupLink}>Go to Login</Link></div>;
    }
    return (
        <div style={DashboardContainerStyle}>
            <h1 style={DashboardTitleStyle}>User Dashboard</h1>
            <p style={{ fontSize: "18px", color: "#555", marginBottom: "30px" }}>Welcome to your personal dashboard. (Mock ID: {localStorage.getItem("userId")})</p>
            <Link to="/events" style={buttonStyle}>View & Create Events</Link>
            <LogoutButton />
        </div>
    );
};

// Mock Component for /events
const Events = () => (
    <div style={DashboardContainerStyle}>
        <h1 style={DashboardTitleStyle}>Events Management</h1>
        <p style={{ fontSize: "18px", color: "#555", marginBottom: "30px" }}>This page allows users to view, create, or modify events.</p>
        <Link to="/viewevents" style={{ ...buttonStyle, marginRight: '10px' }}>View All Events</Link>
        <Link to="/userdashboard" style={signupLink}>Back to Dashboard</Link>
    </div>
);

// Mock Component for /viewevents
const EventView = () => (
    <div style={DashboardContainerStyle}>
        <h1 style={DashboardTitleStyle}>All Community Events</h1>
        <p style={{ fontSize: "18px", color: "#555", marginBottom: "30px" }}>List of upcoming and past events goes here.</p>
        <Link to="/events" style={signupLink}>Back to Events Management</Link>
    </div>
);

// Mock Component for /memapprove
const Memberapprove = () => (
    <div style={DashboardContainerStyle}>
        <h1 style={DashboardTitleStyle}>Member Approval Queue</h1>
        <p style={{ fontSize: "18px", color: "#555", marginBottom: "30px" }}>Admin interface for approving new member registrations.</p>
        <Link to="/admin" style={signupLink}>Back to Admin Dashboard</Link>
    </div>
);

// Mock Component for /user/:id
const UserDetail = () => {
    const mockId = 123; 
    return (
        <div style={DashboardContainerStyle}>
            <h1 style={DashboardTitleStyle}>User Profile (ID: {mockId})</h1>
            <p style={{ fontSize: "18px", color: "#555", marginBottom: "30px" }}>Displaying details for user ID: {mockId}.</p>
            <Link to="/admin" style={signupLink}>Back to Admin Dashboard</Link>
        </div>
    );
};

// Mock Component for /forgot-password route (linked from Login)
const ForgotPassword = () => (
    <div style={DashboardContainerStyle}>
        <h1 style={DashboardTitleStyle}>Forgot Password</h1>
        <p style={{ fontSize: "18px", color: "#555", marginBottom: "30px" }}>Enter your email to receive a password reset link.</p>
        <Link to="/Login" style={signupLink}>Go back to Login</Link>
    </div>
);

// ------------------------------------------------------------------
// 4. MAIN APP COMPONENT (Wraps everything in Router)
// ------------------------------------------------------------------

const App = () => {
    return (
        <BrowserRouter> 
            <Routes>
                <Route path="/" element={<Frontpage />} />
                <Route path="/Login" element={<Login />} /> 
                <Route path="/signup" element={<Signup />} />
                <Route path="/admin" element={<Admin />} />
                <Route path="/user/:id" element={<UserDetail />} />
                <Route path="/memapprove" element={<Memberapprove />} />
                <Route path="/events" element={<Events />} />
                <Route path="/viewevents" element={<EventView />} />
                <Route path="/userdashboard" element={<Userdashboard />} />
                <Route path="/forgot-password" element={<ForgotPassword />} />
            </Routes>
        </BrowserRouter>
    );
};

// ------------------------------------------------------------------
// 5. STYLES (Moved to the bottom for organization)
// ------------------------------------------------------------------

const containerStyle = {
  height: "100vh",
  display: "flex",
  justifyContent: "center",
  alignItems: "center",
  background: "#f4f6f9",
  fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
  width:"100%" 
};

const cardStyle = {
  background: "#fff",
  padding: "40px",
  borderRadius: "10px",
  width: "380px",
  boxShadow: "0 6px 18px rgba(0,0,0,0.1)",
  textAlign: "center",
};

const titleStyle = {
  marginBottom: "10px",
  fontSize: "26px",
  fontWeight: "600",
  color: "#1976d2",
};

const subtitleStyle = {
  marginBottom: "25px",
  fontSize: "14px",
  color: "#555",
};

const formStyle = {
  display: "flex",
  flexDirection: "column",
  textAlign: "left",
};

const labelStyle = {
  marginBottom: "6px",
  fontSize: "14px",
  color: "#333",
  fontWeight: "500",
};

const buttonStyle = {
  padding: "12px",
  background: "#1976d2",
  border: "none",
  borderRadius: "6px",
  color: "#fff",
  fontSize: "15px",
  fontWeight: "600",
  cursor: "pointer",
  marginTop: "18px",
  transition: "background 0.3s",
  textDecoration: "none", // For Link usage
  display: "inline-block",
};

const googleButtonStyle = {
    padding: '0', 
    height: '48px', 
    background: '#fff',
    border: '1px solid #ccc',
    borderRadius: '6px',
    cursor: 'pointer',
    width: '100%',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'flex-start',
    marginBottom: '10px', 
    overflow: 'hidden',
    boxShadow: '0 1px 3px rgba(0,0,0,0.1)',
    transition: 'background 0.2s, box-shadow 0.2s',
  };
  
  const googleIconContainerStyle = {
    backgroundColor: 'white',
    padding: '11px 16px', 
    height: '100%',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    boxSizing: 'border-box',
    borderRight: '1px solid #eee', 
  };

  const googleTextContainerStyle = {
    flexGrow: 1,
    textAlign: 'left',
    color: '#555', 
    fontSize: '15px',
    fontWeight: '500', 
    padding: '0 24px 0 16px', 
  };
  
  const googleButtonHoverStyle = {
    background: '#f8f8f8',
    boxShadow: '0 2px 5px rgba(0,0,0,0.15)',
  };

  const separatorStyle = {
    textAlign: 'center',
    marginBottom: '18px',
    fontSize: '13px',
    color: '#aaa',
    display: 'flex',
    alignItems: 'center',
    padding: '0 5px',
    width: '100%',
  };
  
  const lineStyle = {
    flexGrow: 1,
    height: '1px',
    backgroundColor: '#eee',
  };

const errorStyle = {
  marginTop: "15px",
  fontSize: "13px",
  color: "#d32f2f",
  background: "#ffebee",
  border: "1px solid #ef9a9a",
  padding: "10px",
  borderRadius: "6px",
  textAlign: "center",
};

const signupText = {
  marginTop: "20px",
  fontSize: "14px",
  color: "#333",
};

const signupLink = {
  color: "#1976d2",
  textDecoration: "none",
  fontWeight: "600",
};

// --- NEW MOCK OTP STYLES ---
const mockOtpContainerStyle = {
    marginTop: "25px",
    padding: "15px",
    backgroundColor: "#e3f2fd", // Light blue background
    border: "1px solid #90caf9",
    borderRadius: "8px",
    textAlign: "center",
    boxShadow: "0 2px 4px rgba(0, 0, 0, 0.05)",
};

const mockOtpInstructionStyle = {
    fontSize: "12px",
    color: "#1565c0", // Darker blue text
    fontWeight: "600",
    marginBottom: "5px",
    textTransform: "uppercase",
};

const mockOtpCodeStyle = {
    fontSize: "32px",
    fontWeight: "700",
    color: "#0d47a1", // Deep blue
    letterSpacing: "8px",
    padding: "10px 0",
    borderRadius: "4px",
    background: "#bbdefb",
    marginBottom: "10px",
    userSelect: "text", // Allows user to copy the code easily
};

const mockOtpSubInstructionStyle = {
    fontSize: "12px",
    color: "#555",
};

export default App;
